Project Overview
Core Features

    Creature Representation:
        Genetic Code: Encode creature traits as JSON objects for easy manipulation and storage.
        Neural Network: Placeholder for neural network implementation to control creature behavior in future steps.

    Environment:
        Map: Represent the environment as a grid or continuous space in React. This map will serve as the habitat for creatures, where they move, find food, and interact.
        Food: Distribute food randomly within the environment. Creatures need to find and consume food to survive.

    Simulation Mechanics:
        Movement: Calculate creature movements based on outputs from their neural networks (to be implemented).
        Health: Implement health management where creatures lose health over time and gain health by consuming food.
        Mating and Offspring: Develop mechanisms for genetic crossover and mutation, allowing creatures to reproduce and pass on traits to offspring.

    Genetic Algorithms:
        Selection: Select creatures based on fitness for reproduction. Fitness can be determined by factors such as health, age, and food consumption.
        Crossover: Combine genetic codes of parent creatures to produce offspring with mixed traits.
        Mutation: Introduce random changes in the genetic code to promote diversity and adaptation.

    Neural Networks:
        Inputs/Outputs: Define neural network inputs (e.g., distance to food, presence of other creatures) and outputs (e.g., movement direction, speed).
        Training: Use simple heuristics or evolutionary algorithms to train the neural networks, allowing creatures to learn and adapt their behaviors over generations.

Current State of Development

Project Structure:

backend/
├── controllers/
├── models/
├── node_modules/
├── routes/
├── index.js
├── package-lock.json
├── package.json
└── project_overview.txt

evo-frontend/
├── node_modules/
├── public/
├── src/
│   ├── components/
├   ├   ├──── Grid.js
│   ├── genetics/
│   │   ├── geneticCodeTemplate.js
│   │   ├── geneticVariables.js
│   │   ├── utils.js
│   ├── pages/
│   ├── App.css
│   ├── App.js
│   ├── globalVariables.js
│   ├── index.css
│   ├── index.js
│   ├── nextSteps.txt
│   ├── reportWebVitals.js
│   └── setupProxy.js
├── .env
├── .gitignore
├── package-lock.json
├── package.json
├── README.md
├── .gitattributes
├── .gitignore
└── LICENSE


Backend:

    Set up using Express and body-parser to handle JSON payloads.
    CORS enabled for development.
    Routes:
        GET /start: Initializes the simulation.
        POST /update: Updates the simulation state and returns the current state of creatures and environment.

Frontend:

    Initialized using Create React App.
    Uses Axios to communicate with the backend.
    Periodically sends POST /update requests to the backend to update the simulation state.
    Configured with http-proxy-middleware to proxy API requests during development.

Middleware Configuration:

    http-proxy-middleware handles API requests from the React frontend to the Express backend during development.

Hybrid Approach Explanation:

    Core simulation logic runs on the frontend.
    Backend is utilized for data persistence and retrieval.

Recent Developments

    Mutation and Crossover:
        Mutation functionality: Applied to individual genetic codes to introduce random changes.
        Crossover functionality: Combines genetic codes from two parents to produce offspring, followed by mutation.

    UI Enhancements:
        Descriptors added to buttons to help users understand their functionality:
            Mutate: Applies random mutations to the selected genetic code.
            Crossover: Combines the selected genetic code with the next one to produce an offspring, then applies mutation.

Next Steps

    Health and Survival Mechanics:
        Implement health management where creatures lose health over time and gain health by consuming food.

    Environment Interaction:
        Develop the environment where creatures interact, move, and find food.

    Movement Mechanics:
        Implement movement mechanics based on outputs from the neural network.

    Further UI Enhancements:
        Improve the UI for better visualization and interaction with the simulation.

    Testing and Debugging:
        Continue testing mutation and crossover functionalities.
        Debug issues and ensure smooth simulation flow.